'''Вывод ёлочкой

Для формирования строк применяется
- Подстановка значений в строку с перечислением в функции вывода
- Конкатенация строк со значениями и их сложение в функции вывода
Важной особенностью является невозможность применять спецификатор ширины для встраивания необходимого значения,
потому как на определенном этапе, длина значения (звездочки) сравняется с длиной спецификатора и отключает эффект
Поэтому f-строки и специальные функции, например, center не будут корректно работать

- ' ' * (x - i - 1) - выполняет роль ширины, которая заполняется пробелом.
На каждой следующей итерации берется общая ширина и из ней вычитается текущий счетчик за минус 1 значение,
что приводит на конечном цикле к ровному соприкосновению с границей края

- "*" * (i * 2 + 1) - выполняет роль генератора значения
На каждой следующей итерации берется значение текущего счетчика и умножается на два за плюс 1 значение,
что всегда приводит к получению более удобочитаемого нечетного значения
'''


def simple_herringbone(height, source='*'):
    for i in range(height):
        value = source * (i * 2 + 1)
        width = ' ' * (height - i - 1)
        print(f'{width}{value}')


def strong_herringbone(height, source='*'):
    lines = ''
    for i in range(height):
        value = source * (i * 2 + 1)
        lines += value + '\n'
    res = lines.splitlines()
    width = len(res[-1])
    for i in res:
        print(' '*(width-len(i)) + i)


if __name__ == '__main__':
    print(' Функция simple_herringbone '.center(80, '-'))
    print(simple_herringbone(5))
    print(simple_herringbone(5, '✨'))
    print()

    print(' Функция strong_herringbone '.center(80, '-'))
    print(strong_herringbone(5))
    print(strong_herringbone(5, '✨'))

