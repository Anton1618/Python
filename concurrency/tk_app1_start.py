'''
# Функционал
Окно приложения с возможностью нажатия на кнопку и запуска работы.
Моделирование работы приложения представлено инструкцией time.sleep(10) и сопровождается сменой текста в окне.

В синхроннном коде задачи выполняются упорядоченно.
В следствии однопоточности, по умолчанию, в событийном цикле tkinter mainloop (новый процесс python в диспетчере задач) нельзя выполнять несколько задач одновременно: обновлять состояние окна приложения (передвигать окно) и выполнять функционал (time.sleep)
Так, посредством нажатия на кнопку в приложении, запускается функционал time.sleep(10), после чего, прекращается взаимодействие с приложением, до тех пор, пока запущенная задача не будет завершена.
Пока функционал не будет выполнен, дальнейшие действия с окном невозможны, цикл событий приложения mainloop не отвечает
Визуально это выглядит как "зависание" приложения и отсутствие реагирования на действия пользователя


## Решение проблемы выбирается исходя из типа задачи
• Мультипроцессинг - Требование процессорного времени
Применяется для решения высоконагруженных задач, например, рендер видео из картинок, когда вся нагрузка ложиться на процессор
Применение мультипроцессинга: tk_app1_with_multiprocessing.py

• Многопоточность - Большое количество параллельных I/O операций (ввода-вывода)
Применяется для решения легких задач, например, запрос к базе данных, обращение к API сервера и тп.
Применение многопоточности: tk_app1_with_threading.py

• Асинхронность - Большое количество параллельных I/O операций (ввода-вывода)
Хорошо подходит для сетевого программирования, масштабируемых веб-серверов, систем с большим количеством параллельных I/O операций.
Применения нет. Tkinter не работает асинхронно из-за особенностей библиотеки, которая не взаимодействует напрямую с asyncio
'''

import tkinter as tk
from tkinter import ttk
import time


def sleep_func():
    time.sleep(10)  # Моделирование работы приложения
    lab['text'] = 'Прошло 10 секунд'

root = tk.Tk()
root.geometry('300x300+150+150')

btn = ttk.Button(root, text='Run', command=sleep_func)  # Синхронное выполнение. Функция sleep_func запускается в том же потоке
btn.place(relx=0.5, rely=0.2, anchor=tk.CENTER)

lab = ttk.Label(root, text='Текст до нажатия')
lab.place(relx=0.5, rely=0.6, anchor=tk.CENTER)




if __name__ == '__main__':
    root.mainloop()
