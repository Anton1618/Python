'''
# Реализация работы двух задач в псевдо-асинхронном виде
Печать содержимого директории и периодическая печать дополнительного сообщения


## Реализация псевдо-асинхронной работы
Без псевдо-асинхронного подхода, пока одна запущенная функция не завершит свою работу, она не позволит запуститься другой

Для реализации псевдо-асинхронности, функции возвращающие значения, преобразуются в генераторы.
Затем, в цикле while, через объекты-генераторы, поочередно производится возвращение результатов работы функций, что позволяет равномерно с точки зрения времени и удобства, получать результы всех запущенных задач (легких по функциональности), что схоже по своему принципу с асинхронным выполнением.


## Описание работы
Корректная работа и завершение работы событийного цикла производится в конструкции try/except, что позволяет производить
- Автоматическое прерывание событийного цикла, при истощении итератора
- Прерывание вывода, через генерацию сигнала SIGINT (Ctrl + C) в unix-подобных операционных системах, что в Python обычно соответствует исключению KeyboardInterrupt

Фильтр-исключение для директорий
Метод os.walk на каждой итерации проходит по каждой директории в текущем узле дерева каталогов, возвращая кортеж (root, dirs, files), где root - это текущая директория, dirs - список дочерних директорий, а files - список файлов в текущей директории
Подробности работы генератора и применения среза [:], расматривается в соответствующем файле: python/function/generators/os_walk.py
'''

import time
import os


def clock():
    time0 = round(time.time())  # Локальная переменная, сохраняющая свое состояние после запуска
    while True:
        if (round(time.time()) - time0) % 5 == 0:
            yield '\nTask continues\n5 seconds have passed'
        else:
            yield 0


def filtered_os_wall(top):
    excluded_dirs = ('.vscode','__pycache__', 'module_django', 'tests', '.git', '.idea', '.mypy_cache', '.gitignore', 'test.py', 'test2.py', 'test3.py')  # Директории, которые следует отсечь из вывода
    for dpath, dnames, fnames in os.walk(top):
        dnames[:] = [d for d in dnames if d not in excluded_dirs]
        yield f'\n({len(fnames)}) {dpath}'


def main():
    '''
    Псевдо-событийный цикл, в котором генераторы query и clock возвращают объекты-ожидания, через которые будут получать запросы на выполнение операций, а после их выполнения, приостанавливаться на ожидание
    '''
    data = filtered_os_wall('C:/GoogleDrive/Python')
    info = clock()

    try:
        while True:
            d = next(data)
            i = next(info)
            print(d)
            if i: print(i)  # Если генератор вернет истинное значение. На самом деле "когда" вернет (в указанном диапазоне времени)
            time.sleep(1)

    except StopIteration:
        print("\nThe 'query' generator has finished executing.")
    except KeyboardInterrupt:
        print("\nProgram has been interrupted by user.")



if __name__ == '__main__':
    main()
