'''Экранирование:
Конструкцией: {% raw %} экранируемый текст {% endraw %}
Экранирование символом "e" в скобках шаблона: Template("{{ переменная | e}}")
Экранирование специальной функцией escape: escape(переменная)
Для получения первоначального текста без форматирования и преобразования'''
from jinja2 import Template
from markupsafe import escape

# Экранирование текста, для сохранения в нем фрагмента {{ name }}, исключяя преобразование
data = '''{% raw %}Модуль Jinja
вместо определения {{ name }}
подставляет соответствующие значения{% endraw %}'''

tm = Template(data)
msg = tm.render(name='Anton')
print(msg) # Благодаря экранированию, текст не включает подстановочный аргумент одноименной переменной


# Экранирование спец символов тега в HTML разметке
link = '''Тег <a>, как элемент <a href="#">, применяется в HTML-документе для определения ссылки'''

# Не экранирование
tm = Template(link)
msg = tm.render()
print(msg)
# Несмотря на то, что результатом вывода является полное соответствие строке, в браузере текст будет преобразован
'''Тег <a>, как элемент <a href="#">, применяется в HTML-документе для определения ссылки'''

# Экранирование
tm = Template("{{ link | e}}") # Переменная в шаблоне заключается в скобки и экранируется символом "е" через битовый оператор
msg = tm.render(link=link)
print(msg)
# Текст преобразован в соответствии со значениями строки в шестнадцатиричном формате
'''Тег &lt;a&gt;, как элемент &lt;a href=&#34;#&#34;&gt;, применяется в HTML-документе для определения ссылки'''

# Аналогично, автоматическое экранирование функцией escape
msg = escape(link)
print(msg)